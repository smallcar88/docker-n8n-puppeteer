version: '3.8'

volumes:
  db_storage:
  n8n_storage:

services:
  doc_converter:
    build: ./md2docx
    ports:
      - 5042:5000
  postgres:
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
  browserless:
    image: ghcr.io/browserless/chromium
    ports:
      - 3000:3000
    environment:
      - CONCURRENT=10
      - TOKEN=6R0W53R135510
  n8n:
    # image: docker.n8n.io/n8nio/n8n
    image: n8n-puppeteer:latest
    restart: always
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}:5443
      - N8N_PORT=443
      - N8N_PROTOCOL=https
      - N8N_SECURE_COOKIE=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - TZ=${GENERIC_TIMEZONE}
      - N8N_SSL_CERT=/opt/custom-certificates/_wildcard.martins.localhost.pem
      - N8N_SSL_KEY=/opt/custom-certificates/_wildcard.martins.localhost-key.pem
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=axios,moment,puppeteer,unified,remark-parse,remark-docx,file-saver
# Enable below for debugging
#      - N8N_LOG_LEVEL=debug
#      - N8N_LOG_OUTPUT=console
    ports:
      # - 5678:5678
      - 5443:443
    links:
      - postgres
      - browserless
      - doc_converter
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./certs:/opt/custom-certificates
      - ./ssh_keys:/home/node/.ssh
      - ./shared_files:/home/node/shared
    depends_on:
      browserless:
        condition: service_started
      postgres:
        condition: service_healthy
    depends_on:
      doc_converter:
        condition: service_started
